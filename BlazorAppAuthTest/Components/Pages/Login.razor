@page "/login"

@using BlazorAppAuthTest.Data
@using BlazorAppAuthTest.Models.ViewModels
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject NavigationManager navManager
@* @inject AppDbContext appDbContext *@
@inject UserController userController

<div class="row">
	<div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
		<EditForm Model="@loginViewModel" FormName="LoginForm" OnValidSubmit="Authenticate">
			<DataAnnotationsValidator />
			<div class="mb-3">
				<label>User Name</label>
				<InputText placeholder="user name" @bind-Value="loginViewModel.UserName" class="fore-control"></InputText>
				<ValidationMessage For="()=>loginViewModel.UserName"></ValidationMessage>
			</div>
			<div class="mb-3">
				<label>Password</label>
				<InputText placeholder="password" @bind-Value="loginViewModel.Password" class="fore-control"></InputText>
				<ValidationMessage For="()=>loginViewModel.Password"></ValidationMessage>
			</div>
			<div class="mb-3 text-center">
				<span class="text-danger">@errorMessage</span>
			</div>
			<div class="mb-3 d-grid gap-2">
				<button type="submit" class="btn btn-primary">Login</button>
			</div>
		</EditForm>
	</div>
</div>

@code {

	[CascadingParameter]
	public HttpContext? HttpContext { get; set; }

	[SupplyParameterFromForm]
	public LoginViewModel loginViewModel { get; set; } = new();

	private string? errorMessage;

	private async Task Authenticate()
	{
		var user = await userController.GetUserAsync(loginViewModel.UserName);

		// var user = appDbContext.Users.Where(x => x.Username == loginViewModel.UserName).FirstOrDefault();

		if (user is null || user.Password != loginViewModel.Password)
		{
			errorMessage = "Invalid Username or Password!";
			return;
		}

		var claims = new List<Claim>
		{
			new Claim(ClaimTypes.Name, loginViewModel.UserName),
			new Claim(ClaimTypes.Role, user.Role)
		};

		var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
		var principal = new ClaimsPrincipal(identity);
		await HttpContext.SignInAsync(principal);
		navManager.NavigateTo("/");
	}
}
